#include <iostream>
#include <string>
#include <utility>
#include <climits>
#include <iomanip> // for formatting

//  Item Class - represents one product
class Item {
private:
    std::string name;
    int quantity;
    float price;

public:
    Item(std::string name, int quantity, float price)
        : name{std::move(name)}, quantity{quantity}, price{price} {}

    std::string get_name() const { return name; }
    int get_quantity() const { return quantity; }
    float get_price() const { return price; }

    void set_quantity(int new_quantity) { quantity = new_quantity; }
    void set_price(float new_price) { price = new_price; }

    bool is_match(const std::string &other) const { return name == other; }
};

//  Inventory Class - manages multiple items
class Inventory {
private:
    Item *items[50];  // Maximum 50 items
    float total_money;
    int item_count;

    static void display_data(Item &item) {
        std::cout << std::fixed << std::setprecision(2);
        std::cout << "\n---------------------------------";
        std::cout << "\nItem Name : " << item.get_name();
        std::cout << "\nQuantity  : " << item.get_quantity();
        std::cout << "\nPrice     : ₹" << item.get_price();
        std::cout << "\n---------------------------------";
    }

public:
    Inventory() : items{}, total_money{0}, item_count{0} {}

    // Add New Item
    void add_item() {
        std::string name;
        int quantity;
        float price;

        std::cout << "\nEnter item name: ";
        std::cin >> name;
        std::cout << "Enter quantity: ";
        std::cin >> quantity;
        std::cout << "Enter price (₹): ";
        std::cin >> price;

        items[item_count] = new Item(name, quantity, price);
        item_count++;

        std::cout << "\n Item added successfully!";
    }

    //  Sell Item
    void sell_item() {
        if (item_count == 0) {
            std::cout << "\n️ Inventory is empty. Nothing to sell.";
            return;
        }

        std::string item_to_check;
        std::cout << "\nEnter item name to sell: ";
        std::cin >> item_to_check;

        for (int i = 0; i < item_count; i++) {
            if (items[i]->is_match(item_to_check)) {
                remove_item(i);
                return;
            }
        }
        std::cout << "\n Item not found in inventory.";
    }

    void remove_item(int item_index) {
        int input_quantity;
        Item *item = items[item_index];

        std::cout << "\nEnter quantity to sell: ";
        std::cin >> input_quantity;

        int quantity = item->get_quantity();
        if (input_quantity <= quantity) {
            float money_earned = item->get_price() * input_quantity;
            item->set_quantity(quantity - input_quantity);
            total_money += money_earned;

            std::cout << "\n Sale successful!";
            std::cout << "\nMoney received: ₹" << money_earned;

            if (item->get_quantity() == 0) {
                delete item;
                for (int j = item_index; j < item_count - 1; j++) {
                    items[j] = items[j + 1];
                }
                item_count--;
                std::cout << "\nItem completely removed from inventory.";
            }
        } else {
            std::cout << "\n Cannot sell more items than available.";
        }
    }

    //  Display All Items
    void list_items() {
        if (item_count == 0) {
            std::cout << "\n Inventory is empty.";
            return;
        }

        std::cout << "\n=== INVENTORY LIST ===";
        for (int i = 0; i < item_count; i++) {
            display_data(*items[i]);
        }
    }

    // 🔍 Search for an Item
    void search_item() {
        std::string search_name;
        std::cout << "\nEnter item name to search: ";
        std::cin >> search_name;

        for (int i = 0; i < item_count; i++) {
            if (items[i]->is_match(search_name)) {
                std::cout << "\n Item found!";
                display_data(*items[i]);
                return;
            }
        }
        std::cout << "\n Item not found in inventory.";
    }

    //  Calculate Total Value
    void calculate_total_value() {
        float total_value = 0;
        for (int i = 0; i < item_count; i++) {
            total_value += items[i]->get_price() * items[i]->get_quantity();
        }
        std::cout << "\nTotal Inventory Value: ₹" << total_value;
    }

    //  Update Price
    void update_price() {
        std::string item_name;
        std::cout << "\nEnter item name to update price: ";
        std::cin >> item_name;

        for (int i = 0; i < item_count; i++) {
            if (items[i]->is_match(item_name)) {
                float new_price;
                std::cout << "Enter new price (₹): ";
                std::cin >> new_price;
                items[i]->set_price(new_price);
                std::cout << "\n Price updated successfully!";
                return;
            }
        }
        std::cout << "\n Item not found.";
    }

    //  Exit Summary
    void show_exit_summary() const {
        std::cout << "\n\n=================================";
        std::cout << "\n Total Money Earned: ₹" << total_money;
        std::cout << "\n Remaining Items   : " << item_count;
        std::cout << "\n=================================\n";
    }
};

//  Main Program
int main() {
    int choice;
    Inventory inventory_system;
    std::cout << "\n==============================";
    std::cout << "\n  INVENTORY MANAGEMENT SYSTEM";
    std::cout << "\n==============================";

    while (true) {
        std::cout << "\n\n MENU";
        std::cout << "\n1. Add new item";
        std::cout << "\n2. Sell item";
        std::cout << "\n3. List all items";
        std::cout << "\n4. Search item";
        std::cout << "\n5. Show total inventory value";
        std::cout << "\n6. Update item price";
        std::cout << "\n7. Exit";
        std::cout << "\n\nEnter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1: inventory_system.add_item(); break;
            case 2: inventory_system.sell_item(); break;
            case 3: inventory_system.list_items(); break;
            case 4: inventory_system.search_item(); break;
            case 5: inventory_system.calculate_total_value(); break;
            case 6: inventory_system.update_price(); break;
            case 7:
                inventory_system.show_exit_summary();
                std::cout << "\n Thank you for using the system!\n";
                return 0;
            default:
                std::cout << "\n invalid choice. Please try again.";
                std::cin.clear();
                std::cin.ignore(INT_MAX, '\n');
                break;
        }
    }
}
